From 933f6d95671d004d05436b0402d77255e960b18c Mon Sep 17 00:00:00 2001
From: Adel Aafaque Akhtar <adelaafaque@gmail.com>
Date: Mon, 22 Jun 2020 04:20:41 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/test.csv |  0
 src/App.tsx       | 22 ++++++++++++++++------
 src/Graph.tsx     | 14 ++++++++++++--
 3 files changed, 28 insertions(+), 8 deletions(-)
 create mode 100644 datafeed/test.csv

diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..5f13b0e 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph:boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,26 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let i=0;
+    const int = setInterval(()=>{
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ 
+        data:serverResponds,
+        showGraph:true,
+        });
+      });
+      i++;
+      if(i>1000)
+        clearInterval(int);
+    },100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..7bac26c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem=document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,16 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute("view", "y_line");
+      // Adding attributes to the perspective element
+      elem.setAttribute("columns", '["top_ask_price"]');
+      elem.setAttribute("row-pivots", '["timestamp"]');
+      // Stock price as column = height reflect price
+      elem.setAttribute("column-pivots", '["stock"]');
+      // Chart aggregates
+      elem.setAttribute(
+        "aggregates",
+        '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
 
-- 
2.23.0.windows.1

